/*******************************************************************************
 * Pineapple - a tool to install, configure and test Java web applications 
 * and infrastructure. 
 * 
 * Copyright (C) 2007-2013 Allan Thrane Andersen..
 * 
 * This file is part of Pineapple.
 * 
 * Pineapple is free software: you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 * 
 * Pineapple is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public 
 * license for more details.
 * 
 * You should have received a copy of the GNU General Public License along 
 * with Pineapple. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/


package com.alpha.pineapple.resolvedmodel.traversal;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.HashMap;

import org.easymock.EasyMock;
import org.easymock.IAnswer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.test.util.ReflectionTestUtils;

import com.alpha.easymockutils.MessageProviderAnswerImpl;
import com.alpha.javautils.StackTraceHelper;
import com.alpha.pineapple.execution.ExecutionResult;
import com.alpha.pineapple.i18n.MessageProvider;
import com.alpha.pineapple.resolvedmodel.ResolvedCollection;
import com.alpha.pineapple.resolvedmodel.ResolvedEnum;
import com.alpha.pineapple.resolvedmodel.ResolvedObject;
import com.alpha.pineapple.resolvedmodel.ResolvedParticipant;
import com.alpha.pineapple.resolvedmodel.ResolvedPrimitive;
import com.alpha.pineapple.resolvedmodel.ResolvedType;
import com.alpha.pineapple.resolvedmodel.UnresolvedType;

/**
 * Unit test of the class <code>ResolvedModelBuilderVisitorImpl</code>.
 */
public class ResolvedModelBuilderVisitorTest {
		
	/** 
	 * Key used to identify resolved collection values.
	 */
	static final String KEY1 = "key-1";

	/** 
	 * Key used to identify resolved collection values.
	 */
	static final String KEY2 = "key-2";
	
	/**
	 * Description generated by the description generator.
	 */
	static final String DESCRIPTION = "some-description";

	/**
	 * Null result used when invoking the in description generator. 
	 */
	final static ExecutionResult NULL_RESULT = null;
	
    /**
     * Object under test.
     */
    ResolvedModelVisitor builder;
    
    /**
     * Mock message provider.
     */
    MessageProvider messageProvider;      
    
    /**
     * Mocks resolver object. 
     */
	ModelResolver primaryResolver;
	
    /**
     * Mocks resolver object. 
     */	
	ModelResolver secondaryResolver;
	
    /**
     * Mock execution result.
     */	
	ExecutionResult executionResult;

	/**
     * Mock primary participant
     */		
	ResolvedParticipant primaryParticipant;

	/**
     * Mock secondary participant
     */		
	ResolvedParticipant secondaryParticipant;

	/**
	 * Mock resolved collection.
	 */
	ResolvedCollection resolvedCollection;
	
	@Before
	public void setUp() throws Exception {

        // create mock result 
		executionResult = EasyMock.createMock( ExecutionResult.class );
		EasyMock.replay(executionResult );
		
        // create mock resolver 
		primaryResolver = EasyMock.createMock( ModelResolver.class );
		
        // create mock resolver 
		secondaryResolver = EasyMock.createMock( ModelResolver.class );

        // create mock participant
		primaryParticipant = EasyMock.createMock( ResolvedParticipant.class );		

	    // create mock participant
		secondaryParticipant = EasyMock.createMock( ResolvedParticipant.class );		
					
		// create mock resolved collection
		resolvedCollection = org.easymock.classextension.EasyMock.createMock( ResolvedCollection.class );
				
		// create builder
		builder = new ResolvedModelBuilderVisitorImpl(primaryResolver, secondaryResolver);
		
        // create mock provider
        messageProvider = EasyMock.createMock( MessageProvider.class );
        
        // inject message source
        ReflectionTestUtils.setField( builder, "messageProvider", messageProvider , MessageProvider.class );
        
        // complete mock source initialization        
        IAnswer<String> answer = new MessageProviderAnswerImpl(); 
        
        EasyMock.expect( messageProvider.getMessage(
        		(String) EasyMock.isA( String.class ), 
        		(Object[]) EasyMock.anyObject()));
        EasyMock.expectLastCall().andAnswer(answer).anyTimes();        
        EasyMock.replay(messageProvider);                                		        
	}

	@After
	public void tearDown() throws Exception {
		builder = null;
		primaryResolver = null;
		secondaryResolver = null;
		messageProvider = null;
		executionResult = null;
		primaryParticipant = null;
		secondaryParticipant = null;
		resolvedCollection = null;
	}

	/**
	 * Complete mock setup for secondary resolver.
	 *  
	 * @param values values returned by secondary resolver when collection values are resolved.
	 */
	void completeMockSecondaryResolversSetup(HashMap<String, ResolvedParticipant> values) {
				 		
		try {
			EasyMock.expect( secondaryResolver.resolveCollectionAttributeValues( (ResolvedParticipant) EasyMock.anyObject())).andReturn( values );        
	        EasyMock.replay( secondaryResolver );	
	        
		} catch (ModelResolutionFailedException e) {
			fail ( StackTraceHelper.getStrackTrace(e));
		}
	}

	/**
	 * Complete mock setup for primary resolver.
	 * 
	 * @param values values returned by primary resolver when collection values are resolved. 
	 */
	void completeMockPrimaryResolversSetup( HashMap<String, ResolvedParticipant> values) {
				 		
		try {
			
			EasyMock.expect( primaryResolver.resolveCollectionAttributeValues( (ResolvedParticipant) EasyMock.anyObject())).andReturn( values );
	        EasyMock.replay( primaryResolver );
	        	        
		} catch (ModelResolutionFailedException e) {
			fail ( StackTraceHelper.getStrackTrace(e));
		}
	}
		
	/**
	 * Complete mock resolved collection setup.
	 */	
	void completeMockCollectionSetup() {
		completeMockCollectionSetup(1,1);
	}

	/**
	 * Complete mock resolved collection setup.
	 */	
	void completeMockCollectionSetup(int timesPrimary, int timesSecondary ) {
        org.easymock.classextension.EasyMock.expect( resolvedCollection.getPrimaryParticipant()).andReturn(primaryParticipant).times(timesPrimary);
        org.easymock.classextension.EasyMock.expect( resolvedCollection.getSecondaryParticiant()).andReturn(secondaryParticipant).times(timesSecondary);        
        org.easymock.classextension.EasyMock.replay( resolvedCollection );
	}
	
	/**
	 * Visit empty resolved collection.
	 */
	@Test
	public void testVisitResolvedCollectionWith0x0InEachCollection() throws Exception {
		
        // complete collection mock setup
        completeMockCollectionSetup();
		
		// complete resolver mock setup
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		completeMockPrimaryResolversSetup(primaryValues);
		completeMockSecondaryResolversSetup(secondaryValues);
                	            
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
                
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );               
	}
	
	/**
	 * Visit resolved collection with 
	 * one named entry, which is identical 
	 * in each values collection.
	 */
	@Test
	public void testVisitResolvedCollectionWith1x1NamedValueInEachCollection() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
        // complete collection mock setup
		resolvedCollection.addChild(resolvedChild);
        completeMockCollectionSetup();
		
		// complete resolver mock setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);		
		
		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.replay(secondaryValue );
		
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(KEY1, primaryValue);
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(KEY1, secondaryValue);
				
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );
		completeMockPrimaryResolversSetup(primaryValues);
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( resolvedChild );       
        EasyMock.verify( primaryValue );
        EasyMock.verify( secondaryValue ); 
	}

	/**
	 * Visit resolved collection with 
	 * two named entries, which is identical in each values collection.
	 */
	@Test
	public void testVisitResolvedCollectionWith2x2NamedValuesInEachCollection() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		ResolvedType resolvedChild2 = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
        // complete collection mock setup
		resolvedCollection.addChild(resolvedChild);
		resolvedCollection.addChild(resolvedChild2);
        completeMockCollectionSetup();
		
		// complete resolver mock setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);		
		ResolvedParticipant primaryValue2 = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue2.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue2);		

		
		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);				
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(KEY1, primaryValue);
		primaryValues.put(KEY2, primaryValue2);		
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(KEY1, secondaryValue);
		secondaryValues.put(KEY2, secondaryValue);		
				
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild2 );				
		completeMockPrimaryResolversSetup(primaryValues);
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( resolvedChild );
        EasyMock.verify( primaryValue );
        EasyMock.verify( primaryValue2 );
	}
	
	
	/**
	 * Visit resolved collection 
	 * with one null entry 
	 * in each values collection.
	 */
	@Test
	public void testVisitResolvedCollectionWith1x1NullValueInEachCollection() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
        // complete collection mock setup
		resolvedCollection.addChild(resolvedChild);
        completeMockCollectionSetup();
		
		// complete resolver mock setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);		

		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);				
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(null, primaryValue);
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(null, secondaryValue);
				
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );
		completeMockPrimaryResolversSetup(primaryValues);
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( resolvedChild );       
        EasyMock.verify( primaryValue );
	}
	
	
	/**
	 * Visit resolved collection with one entry in each values collection.
	 */
	@Test
	public void testVisitResolvedCollectionWith1x1ValueNamedNull() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
        // complete collection mock setup
		resolvedCollection.addChild(resolvedChild);
        completeMockCollectionSetup();
		
		// complete resolver mock setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);		
		
		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);				
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(null, primaryValue);
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(null, secondaryValue);
				
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );
		completeMockPrimaryResolversSetup(primaryValues);
		completeMockSecondaryResolversSetup(secondaryValues);
		                
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );        
        EasyMock.verify( resolvedChild );
	}	

	/**
	 * Visit resolved collection with 
	 * one named entry in primary collection 
	 * and no entry in secondary collection  
	 */
	@Test
	public void testVisitResolvedCollectionWith1x0NamedValueInEachCollection() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
        // complete collection mock setup
		resolvedCollection.addChild(resolvedChild);	
        completeMockCollectionSetup(1,2);
		
		// complete mock values setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);	
		ResolvedParticipant nonexistingCollectionValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.replay(nonexistingCollectionValue );
				
		// complete mock collections setup
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(KEY1, primaryValue);
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
				
		// complete resolver mock setup		
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );		
		completeMockPrimaryResolversSetup(primaryValues);
		
		EasyMock.expect( secondaryResolver.createNonExistingCollectionValue(EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn( nonexistingCollectionValue );  						
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( resolvedChild );
        EasyMock.verify( primaryValue );
        EasyMock.verify( nonexistingCollectionValue );
	}
	
	/**
	 * Visit resolved collection with 
	 * no entry in primary collection and one named entry in secondary collection  
	 */
	@Test
	public void testVisitResolvedCollectionWith0x1NamedValueInEachCollection() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);

		// complete mock values setup
		ResolvedParticipant nonexistingCollectionValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(nonexistingCollectionValue.isResolutionSuccesful()).andReturn(false);		
		EasyMock.replay(nonexistingCollectionValue );
		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);		
		EasyMock.expect(secondaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(secondaryValue);				
				
		// complete mock collections setup
		resolvedCollection.addChild(resolvedChild);		
        completeMockCollectionSetup(2,1);
		
		// complete resolver mock setup
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(KEY1, secondaryValue );
								
		EasyMock.expect( primaryResolver.createNonExistingCollectionValue(EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn( nonexistingCollectionValue );  										
		completeMockPrimaryResolversSetup(primaryValues);
		
		EasyMock.expect( secondaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );				
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( resolvedChild );
        EasyMock.verify( secondaryValue );
        EasyMock.verify( nonexistingCollectionValue );        
	}	
		
	/**
	 * Visit resolved enum.
	 */
	@Test
	public void testVisitResolvedEnum() throws Exception {

		// create mock resolved enum
		ResolvedEnum resolvedEnum = org.easymock.classextension.EasyMock.createMock( ResolvedEnum.class);
		org.easymock.classextension.EasyMock.replay(resolvedEnum);
		
		// complete resolver mock setup
		EasyMock.replay( primaryResolver );
		EasyMock.replay( secondaryResolver );
                	            
		// visit
        Object result = builder.visit( resolvedEnum, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
                
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );
        org.easymock.classextension.EasyMock.verify( resolvedEnum );
	}	

	
	/**
	 * Visit resolved primitive.
	 */
	@Test
	public void testVisitResolvedPrimitive() throws Exception {

		// create mock resolved primitive
		ResolvedPrimitive resolvedPrimitive = org.easymock.classextension.EasyMock.createMock( ResolvedPrimitive.class);
		org.easymock.classextension.EasyMock.replay(resolvedPrimitive);
		
		// complete resolver mock setup
		EasyMock.replay( primaryResolver );
		EasyMock.replay( secondaryResolver );
                	            
		// visit
        Object result = builder.visit( resolvedPrimitive, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
                
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );
        org.easymock.classextension.EasyMock.verify( resolvedPrimitive );
	}	
	
	/**
	 * Visit resolved object with zero attributes  
	 */
	@Test
	public void testVisitResolvedObjectWithZeroAttributes() throws Exception {

		// create mock resolved object 
		ResolvedObject resolvedObject = org.easymock.classextension.EasyMock.createMock( ResolvedObject.class);
		org.easymock.classextension.EasyMock.expect(resolvedObject.getPrimaryParticipant())
			.andReturn(primaryParticipant);
		org.easymock.classextension.EasyMock.replay(resolvedObject);

		// complete primary participant mock setup
        EasyMock.replay(primaryParticipant);

        
		// complete resolver mock setup
		String[]attributeNames = {};
				
		EasyMock.expect( primaryResolver.resolveAttributeNames(EasyMock.isA(ResolvedParticipant.class)))
			.andReturn(attributeNames );
        EasyMock.replay( primaryResolver );
        EasyMock.replay( secondaryResolver );
		               
		// visit
        Object result = builder.visit( resolvedObject, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );
        EasyMock.verify( primaryParticipant );
        org.easymock.classextension.EasyMock.verify( resolvedObject );
	}	
	
	/**
	 * Visit resolved object with one attribute  
	 */
	@Test
	public void testVisitResolvedObjectWithOneAttribute() throws Exception {

		// create mock resolved type created during resolution
		ResolvedType resolvedChild = EasyMock.createMock( ResolvedType.class);
		EasyMock.replay(resolvedChild);
		
		// create mock resolved object 
		ResolvedObject resolvedObject = org.easymock.classextension.EasyMock.createMock( ResolvedObject.class);
		org.easymock.classextension.EasyMock.expect(resolvedObject.getPrimaryParticipant())
			.andReturn(primaryParticipant).times(2);
		org.easymock.classextension.EasyMock.expect(resolvedObject.getSecondaryParticiant())
		.andReturn(secondaryParticipant);
		resolvedObject.addChild(resolvedChild);
		org.easymock.classextension.EasyMock.replay(resolvedObject);

		// complete participant mocks setup
        EasyMock.replay(primaryParticipant);
        EasyMock.replay(secondaryParticipant);

		// complete attribute participant mocks setup 
		ResolvedParticipant resolvedPrimaryAttribute = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.replay(resolvedPrimaryAttribute );
		ResolvedParticipant resolvedSecondaryAttribute = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.replay(resolvedSecondaryAttribute );

        
		// complete resolver mock setup
		String[]attributeNames = { "attribute-1" };
				
		EasyMock.expect( primaryResolver.resolveAttributeNames(EasyMock.isA(ResolvedParticipant.class)))
			.andReturn(attributeNames );
		EasyMock.expect( primaryResolver.resolveAttribute(
				EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn(resolvedPrimaryAttribute);
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedObject.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andReturn( resolvedChild );				
        EasyMock.replay( primaryResolver );
        
		EasyMock.expect( secondaryResolver .resolveAttribute(
				EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn(resolvedSecondaryAttribute);				                
        EasyMock.replay( secondaryResolver );
		               
		// visit
        Object result = builder.visit( resolvedObject, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );
        EasyMock.verify( primaryParticipant );
        EasyMock.verify( secondaryParticipant );
        org.easymock.classextension.EasyMock.verify( resolvedObject );
	}		
	
	/**
	 * Visit resolved collection with 
	 * no entry in primary collection 
	 * and one named entry in secondary collection which fails resolution. 
	 */
	@Test
	public void testVisitResolvedCollectionWith0x1NamedValueWhichFailsResolution() throws Exception {
		
        // complete collection mock setup
		resolvedCollection.addChild(EasyMock.isA(UnresolvedType.class));		
		completeMockCollectionSetup(2,1);
		
        // complete exception setup
        Exception thrownException = new IllegalStateException("..resolution failed for some reason..");
        
		// complete mock values setup
		ResolvedParticipant nonexistingCollectionValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(nonexistingCollectionValue.isResolutionSuccesful()).andReturn(false);		
		EasyMock.replay(nonexistingCollectionValue );
		ResolvedParticipant secondaryValue = EasyMock.createMock( ResolvedParticipant.class);		
		EasyMock.expect(secondaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(secondaryValue);				
        
		// complete resolver mock setup
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		secondaryValues.put(KEY1, secondaryValue );					
		
		EasyMock.expect( primaryResolver.createNonExistingCollectionValue(EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn( nonexistingCollectionValue );  								
		completeMockPrimaryResolversSetup(primaryValues);

		EasyMock.expect( secondaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andThrow( thrownException);				
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( nonexistingCollectionValue);        
        EasyMock.verify( secondaryValue );
	}
	
	/**
	 * Visit resolved collection with 
	 * one named in primary collection 
	 * and no entries in secondary collection 
	 * which fails resolution. 
	 */
	@Test
	public void testVisitResolvedCollectionWith1x0NamedValueWhichFailsResolution() throws Exception {
		
        // complete collection mock setup
		resolvedCollection.addChild(EasyMock.isA(UnresolvedType.class));		
		completeMockCollectionSetup(1,2);
		
        // complete exception setup
        Exception thrownException = new IllegalStateException("..resolution failed for some reason..");
        
		// complete mock values setup
		ResolvedParticipant primaryValue = EasyMock.createMock( ResolvedParticipant.class);
		EasyMock.expect(primaryValue.isResolutionSuccesful()).andReturn(true);
		EasyMock.replay(primaryValue);	
		ResolvedParticipant nonexistingCollectionValue = EasyMock.createMock( ResolvedParticipant.class);		
		// never invoked due to exception thrown when primary resolver attempts to create resolved type 
		//EasyMock.expect(nonexistingCollectionValue.isResolutionSuccesful()).andReturn(false);
		
		EasyMock.replay(nonexistingCollectionValue );
		
		HashMap<String, ResolvedParticipant> primaryValues = new HashMap<String, ResolvedParticipant>();		
		primaryValues.put(KEY1, primaryValue);
		HashMap<String, ResolvedParticipant> secondaryValues = new HashMap<String, ResolvedParticipant>();
		
		EasyMock.expect( primaryResolver.createResolvedType(EasyMock.isA( ResolvedCollection.class), 
				EasyMock.isA(ResolvedParticipant.class), 
				EasyMock.isA(ResolvedParticipant.class)))
				.andThrow( thrownException);		
		completeMockPrimaryResolversSetup(primaryValues);
		
		EasyMock.expect( secondaryResolver.createNonExistingCollectionValue(EasyMock.isA(String.class),
				EasyMock.isA(ResolvedParticipant.class))).andReturn( nonexistingCollectionValue );  										
		completeMockSecondaryResolversSetup(secondaryValues);
		               
		// visit
        Object result = builder.visit( resolvedCollection, executionResult);
        
        // test that visitor returns null
        assertEquals(NULL_RESULT, result);
        
        // test
        EasyMock.verify( primaryResolver );		
        EasyMock.verify( secondaryResolver );
        EasyMock.verify( executionResult );        
        org.easymock.classextension.EasyMock.verify( resolvedCollection );
        EasyMock.verify( primaryValue );
        EasyMock.verify( nonexistingCollectionValue);
	}		
	
}

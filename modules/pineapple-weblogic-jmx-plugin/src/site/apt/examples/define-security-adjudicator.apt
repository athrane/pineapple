 ------
 How-to: Define the security adjudicator for WebLogic 
 ------
 Allan Thrane Andersen
 ------
 June 2010

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

How-to: Define the security adjudicator for WebLogic  

			
* Overview

	This example illustrates how the adjudicator in the
	security configuration should be defined in an Pineapple module 
	for usage with the WebLogic JMX plugin.  
          
* Defining adjudicator

** Creation of "unnamed" adjudicator

	A default realm created by WebLogic either by invoking the <<<weblogic.Server>>> 
	class to create a domain or using a template will create a default security realm 
	named <<myrealm>>. The generated <<<config.xml>>> will be defined as:          
     
+---
<?xml version='1.0' encoding='UTF-8'?>
<domain xmlns="http://www.bea.com/ns/weblogic/920/domain" xmlns:sec="http://www.bea.com/ns/weblogic/90/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wls="http://www.bea.com/ns/weblogic/90/security/wls" xsi:schemaLocation="http://www.bea.com/ns/weblogic/90/security/xacml http://www.bea.com/ns/weblogic/90/security/xacml.xsd http://www.bea.com/ns/weblogic/90/security http://www.bea.com/ns/weblogic/90/security.xsd http://www.bea.com/ns/weblogic/920/domain http://www.bea.com/ns/weblogic/920/domain.xsd http://www.bea.com/ns/weblogic/90/security/wls http://www.bea.com/ns/weblogic/90/security/wls.xsd">
  <name>alphadomain</name>
  <domain-version>9.2.3.0</domain-version>
  <security-configuration>
    <name>alphadomain</name>
    <realm>
      <sec:authentication-provider xsi:type="wls:default-authenticatorType"></sec:authentication-provider>
      <sec:authentication-provider xsi:type="wls:default-identity-asserterType">
        <sec:active-type>AuthenticatedUser</sec:active-type>
      </sec:authentication-provider>
      <sec:role-mapper xmlns:xac="http://www.bea.com/ns/weblogic/90/security/xacml" xsi:type="xac:xacml-role-mapperType"></sec:role-mapper>
      <sec:authorizer xmlns:xac="http://www.bea.com/ns/weblogic/90/security/xacml" xsi:type="xac:xacml-authorizerType"></sec:authorizer>
      <sec:adjudicator xsi:type="wls:default-adjudicatorType"></sec:adjudicator>
      <sec:credential-mapper xsi:type="wls:default-credential-mapperType"></sec:credential-mapper>
      <sec:cert-path-provider xsi:type="wls:web-logic-cert-path-providerType"></sec:cert-path-provider>
      <sec:cert-path-builder>WebLogicCertPathProvider</sec:cert-path-builder>
      <sec:name>myrealm</sec:name>
    </realm>
    <default-realm>myrealm</default-realm>
    <credential-encrypted>{3DES}lzk5xgJ+NKaLUb8SJm5BUmNVSqa7yAFGEXp5WV2Mz6Pl6gYHVsINZvt+Bm7EDRNpSPXCW5JMA8lJifTPy3pulJ5LbvRlWTVR</credential-encrypted>
    <node-manager-username>weblogic</node-manager-username>
    <node-manager-password-encrypted>{3DES}sFVI2zdwIyefey5hsxsGeA==</node-manager-password-encrypted>
  </security-configuration>  
	....	
</domain>	
+---

	The import part of the configuration is:

+---
  <sec:adjudicator xsi:type="wls:default-adjudicatorType"></sec:adjudicator>
+---
	
	..which defines a adjudicator of the type:
	
	* <<<default-adjudicatorType>>>
	 
	[] 

	At runtime a WebLogic server will initialize one adjudicator from the above configuration:
	
		* a adjudicator named <<<myrealmDefaultAdjudicator>>>
				
	[]		   		
	
** Making Pineapple cope with the "unnamed" adjudicator  	
	
	The shown configuration does NOT pose a problem for Pineapple which can resolve the 
	unnamed adjudicator against the actual runtime adjudicator which exist in WebLogic.

	The plugin is able to resolve the adjudicator even though it is unnamed because the security
	realm object only defines one adjudicator in the schema	and in the MBean model. In this 
	situation the name attribute (which is <null> and <myrealmDefaultAdjudicator> in the respective 
	models) isn't used to resolve the object in the two models.         
                    
 ------
 The XMLBeans model
 ------
 Allan Thrane Andersen 
 ------
 January 2012
 ------

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

The WebLogic MBean model

	
* The XMLBeans model

	The XMLBean model is defined by the WebLogic 9.2 domain schemas. XMLBeans 
	is used to generate classes for XML-to-Object binding.
	
	Subjects regarding the XMLBean model are:
	
	* {{{The_model_layers}The model layers}}.
	
	* {{{Used_type_information_in_the_XMLBeans_model}Used type information in the XMLBeans model}}.

	* {{{Representation_of_simple_types_in_the_XMLBeans_model}Representation of simple types}}.			

	* {{{Representation_of_enumerations_in_the_XMLBeans_model}Representation of enumerations}}.			

	* {{{Representation_of_collections_in_the_XMLBeans_model}Representation of collections}}.			
		
	* Handling XML Schema default values.		
	
	* Resolution of attribute types.
	
	* Resolution of attribute values	
	
	* Resolution of collection attribute values.	
		
	[] 		
	
** {The model layers}	
	
	The model layers in XML:

	* The meta-meta-models: W3C XMLSchema schema.

	* The meta-models: The WebLogic schemas (domain_9_2.xsd 
	and the 3 other schemas). 
  		
	* The model: XML files adhering to the WebLogic 
	schema (e.g. config.xml).
	
	[] 

	The model layers in XMLBeans:
	
	* The meta-meta-models: Java lang classes, such as
	<<<Object>>> and <<<Class>>>.

	* The meta-models: The XMLBeans objects, such as
	<<<XmlObject>>>, <<<SchemaProperty>>> and <<<SchemaType>>>.
	
	* The model: Instances of the generated XMLBeans in the 
	namespace <<<com.bea.ns.weblogic.x90.*>>>

	[]
	
** {Used type information in the XMLBeans model}	
	
	During access to the XMLBeans model, the type information in the meta-model 
	is used to drive the traversal and creation of the resolved model. The traversal/creation 
	is based on XMLBeans meta-model objects, where the two types used are:
	
	* <<<SchemaType>>> is the metadata "type" class for <<<XmlObject>>>, and 
	it plays the analogous role for <<<XmlObject>>> that <<<Class>>> plays for <<<Object>>>.  
	
	* <<<SchemaProperty>>> represents a summary of similar SchemaFields in a complex type. 
	
	[]
	
 	The two types are used by the <<<XmlBeansModelResolverImpl>>> to resolve type information 
 	about the XMLBeans model. When a XMLBean object/attribute is resolved then the type
 	is stored as <<<SchemaProperty>>>, because the <<<SchemaType>>> can always be 
	inferred from a schema property. 	   	 	 	
	
	Link to the XMLBean documentation about the <schema type system> using in XMLBeans:
	
	* http://xmlbeans.apache.org/docs/2.0.0/guide/conIntroToTheSchemaTypeSystem.html
	
	* http://xmlbeans.apache.org/docs/2.0.0/reference/org/apache/xmlbeans/SchemaType.html
	
	* http://xmlbeans.apache.org/docs/2.2.0/reference/org/apache/xmlbeans/SchemaProperty.html
	
	* http://xmlbeans.apache.org/docs/2.0.0/guide/conMethodsForGeneratedJavaTypes.html
	
	[]    		 	
		
*** An alternative non-implemented approach to type information
	
	An alternative way of storing type information would be to store the type resolved 
	directly from the generated XMLBeans. So instead of storing the corresponding 
	schema property for an <<<DomainType>>> the type <<<DomainType>>> would be stored 
	directly: The reasons for using the meta-model objects are:
	
	* All relevant meta-information used in the traversal can be gained from the 
	meta-model objects.

	* Not all relevant meta-information used in the traversal can be gained from the 
	type objects, the meta-models needs to be accessed.
	
	* Usage of the meta-model objects enables traversal based on the 
	meta-model instead of the model itself. This enabled traversal strategies
	for complete traversal of the meta-model despite "holes" in the model itself.
	
	[]				
	
*** Resolving the meta data from XMLBeans 

	The <<<SchemaType>>> can be resolved from an XMLBean instance by invoking <<<XmlObject.schemaType()>>>:
	
+----
    DomainType domainXmlBean = ....

	// get schema type
    SchemaType domainSchemaType = domainXmlBean.schemaType();
+----	 

	The <<<SchemaType>>> can be resolved from an <<<SchemaProperty>>> by 
	invoking <<<SchemaProperty.getType()>>>:
	
+----
	// get schema type
    SchemaType domainSchemaType = domainSchemaProperty.getType();
+----	 

	TODO:
	The <<<SchemaProperty>>> can be resolved from an <<<SchemaType>>> by 
	invoking <<<.....>>>: 
	
+----
	// get schema property 
    ....................
+----	 


	The <<<SchemaProperty>>> of an child can be resolved from an <<<SchemaType>>> by 
	invoking <<<SchemaType.getProperties()>>> which returns all elements followed by 
	attributes. An iteration over the the array can find the required child by name:
	 
+----
    SchemaType domainSchemaType = ... 
    
    // get schema properties
    SchemaProperty[] properties = docSchemaType.getProperties();

    // iterate over the schema properties
    for ( SchemaProperty property : properties )
    {            
        if ( propertyName.equals( property.getJavaPropertyName() ) )
        {
            return property;
        }
    }	 	
+----

	The method is implemented in <<<XmlBeansModelAccessor.getSchemaPropertyByName(String name,
	XmlObject)>>> which a schema property. Them method should be invoke with the Java property 
	name of an attribute, i.e. <<<AdminServerName>>> and not the schema property name, i.e.
	the element name <<<admin-server-name>>>.
	
	The name of an attribute can be read from the schema property by: 
	
+----	
	String name = domainSchemaProperty.getJavaPropertyName();	
+----	

	returning <<<Domain>>>, which is the naming used in the XMLBeans, where:

+----	
	String name = domainSchemaProperty.getName();	
+----	

	returns: <<<domain>>>, which is the naming used in the schema.


** {Representation of simple types in the XMLBeans model}

	The build-in types defined by the XML Schema definition are considered simple types by XMLBeans. 
	{{{http://xmlbeans.apache.org/docs/2.0.0/guide/conXMLBeansSupportBuiltInSchemaTypes.html}The list of the simple schema types supported by XMLBeans can be found here}}.
	
	XMLBeans provides a Java type for each supported type, e.g. the schema type <<<xs:boolean>>> is 
	represented by the XMLBean type <<<XmlBoolean>>> which again coresponds to the primitive Java 
	type <<<boolean>>>.			  		  

	The <<<XmlBeansAccessorImpl>>> class implements the <<<isPrimitive(..)>>> which can determine
	whether the type of an XMLBean is simple. The <<<XmlBeansAccessorImpl>>> class is used
	by the <<<XmlBeansModelResolverImpl>>> during creation of the resolved model.  
	
	During creation of the resolved model, simple types is represented by a
	<<<ResolvedPrimitive>>>.		

** {Representation of enumerations in the XMLBeans model}	
	
	The domain schemas defines attributes with the <<<enumeration>>> type. An example is	
	the schema type <<<domainType>>> contains the attribute <<<administration-protocol>>>
	which is defines as an enum:	

+-------
<xs:element name="administration-protocol" nillable="true" minOccurs="0">
  <xs:annotation>
    <xs:documentation>...</xs:documentation>
  </xs:annotation>
  <xs:simpleType>
    <xs:restriction base="xs:string">
      <xs:enumeration value="t3s"/>
      <xs:enumeration value="https"/>
      <xs:enumeration value="iiops"/>
      <xs:enumeration value="t3"/>
      <xs:enumeration value="http"/>
      <xs:enumeration value="iiop"/>
    </xs:restriction>
  </xs:simpleType>
</xs:element>
+-------
 
	Schema enums are represented in XMLBeans by a generated type which
	extends the <<<StringEnumAbstractBase>>> type. Please refer to 
	the XMLBeans documentation for more info about 	
	{{{http://xmlbeans.apache.org/docs/2.0.0/guide/conJavaTypesGeneratedFromUserDerived.html} user derived types like enums.}}	

	The generated XMLBean model type <<<DomainType>>> contains the attribute 
	<<<AdministrationProtocol>>> which has the generated enum type 
	<<<com.bea.ns.weblogic.x920.domain.DomainType.AdministrationProtocol.Enum>>>:

+-------

static final class Enum extends org.apache.xmlbeans.StringEnumAbstractBase {

  /**
  * Returns the enum value for a string, or null if none.
  */
  public static Enum forString(java.lang.String s)
    { return (Enum)table.forString(s); }
            
  /**
  * Returns the enum value corresponding to an int, or null if none.
  */
  public static Enum forInt(int i)
    { return (Enum)table.forInt(i); }
            
  private Enum(java.lang.String s, int i)
    { super(s, i); }
            
  static final int INT_T_3_S = 1;
  static final int INT_HTTPS = 2;
  static final int INT_IIOPS = 3;
  static final int INT_T_3 = 4;
  static final int INT_HTTP = 5;
  static final int INT_IIOP = 6;
            
  public static final org.apache.xmlbeans.StringEnumAbstractBase.Table table =
    new org.apache.xmlbeans.StringEnumAbstractBase.Table
      (
        new Enum[] {
          new Enum("t3s", INT_T_3_S),
          new Enum("https", INT_HTTPS),
          new Enum("iiops", INT_IIOPS),
          new Enum("t3", INT_T_3),
          new Enum("http", INT_HTTP),
          new Enum("iiop", INT_IIOP),
        }
      );
  
  private static final long serialVersionUID = 1L;
  private java.lang.Object readResolve() { return forInt(intValue()); } 
}	
+-------

	The <<<XmlBeansAccessorImpl>>> class implements the <<<isEnum(..)>>> which can determine
	whether the type of an XMLBean is an enum. The <<<XmlBeansAccessorImpl>>> class is used
	by the <<<XmlBeansModelResolverImpl>>> during creation of the resolved model.  
	
	During creation of the resolved model, enum types is represented by a
	<<<ResolvedEnum>>>.		

** {Representation of collections in the XMLBeans model}

*** Unbounded values in XML schemas

	User defined schema types are types which isn't defined in the XML schema specification
	but defined in the schema. XMLBeans generate a Java interface for each user defined type.

	The user defined types can contain unbounded attributes which can contain multiple values. 

	In the generated XMLBeans model, the unbounded attributes which return multiple values are 
	implemented as a array, e.g. the getter method to access the attribute in the generated 
	Java interface returns an array.

	<Example:> The XML schema defines the complex type <<<domainType>>> which have an
	unbounded attribute named <<<server>>>. The generated XMLBeans model contains the
	Java interface <<<DomainType>>> which have an attributed named <<<Server>>>. The
	value(s) of the attribute can be accessed by the getter method <<<getServerArray()>>> 
	which returns <<<ServerType[]>>>.		

*** Representation of collections in the resolved model

	During creation of the resolved model, two type of object needs to be considered:
	
	* The type of the collection, e.g. collection of XX, such as <<Collection\<SomeType\>>> or array of XX, such as <<SomeType[]>>.
	
	* The type for the content of the collection, e.g. <<SomeType>>.
	
	[]
		
	When the resolved model is created, a resolved model node is created to represent the container. 
	Furthermore multiple model nodes are created as child nodes to the container node to represent 
	each entry in the collection. The container model node is represented by the 
	<<<ResolvedCollection>>>. The child nodes are (typical) represented by <<<ResolvedObject>>>.  

*** Type information for collections 

	The XMLBeans model doesn't define two distinct types for collections. The XMLBean model only define
	the type for the unbounded attribute, which is corresponds to the type of the content in the collection.
	The corresponding schema property contains attributes which signals that type is an unbounded attribute, 
	e.g. an collection.
				
	The <<<XmlBeansAccessorImpl>>> class implements the <<<isCollection(..)>>> which can determine
	whether the type of an XMLBean is an collection. The <<<XmlBeansAccessorImpl>>> class is used
	by the <<<XmlBeansModelResolverImpl>>> during creation of the resolved model.  

*** Handling the mismatch between the resolved model and XMLBeans

	There is a mismatch between the resolved model and the XMLBeans. The problem is that in the 
	XMLBeans schema property based type system there is no explicit representation of container types.
	
	<<The solution to the problem is to reuse the schema property for BOTH the container type and the
	content of the collection>>:
	
	* When the XMLBeans model resolver resolves a unbounded attribute to collection then a 
	<<<ResolvedCollection>>> is created by the <<<XmlBeansModelResolverImpl.resolveAttribute()>>>. 
	The type of the collection is the schema property of the unbounded attribute.
	
	* When the XMLBeans model resolver resolves the content of the unbounded attribute then a 
	<<<ResolvedObject>>> is created by the <<<XmlBeansModelResolverImpl.resolveCollectionAttributeValue()>>>
	for each value in the collection. The type of the values is the collection is also the schema property of
	the unbounded attribute.

	[]	    
	
	
** {Representation of objects in the XMLBeans model}

	User defined schema types are types which isn't defined in the XML schema specification
	but defined in the schema. XMLBeans generate a Java interface for each user defined type.
	
	TODO: write....
			
	
** Handling XML Schema default values 

	Default values are defined for elements in the domain schema. Example: 
	The <<<domain-version>>> attribute in the <<<DomainType>>> has a default 
	value defined: 
	
+------
<xs:complexType name="domainType">
  <xs:complexContent>
    <xs:extension base="dom:configurationType">
      <xs:sequence>
        <xs:element name="domain-version" type="xs:string" nillable="true" minOccurs="0" />
        <xs:element name="console-enabled" type="xs:boolean" default="true" nillable="false" minOccurs="0">                
	    ....
+------

	Generated XMLBean accessor methods based on schema properties:	
	
	nillable = true : 
	
		* <<<isNillXX()>>>
		
		* <<<isNillXXArray()>>>
		
		[]
		
	minOccurs="0" :
	
		* <<<isSetXX()>>>
		
		* <<<isSetXXArray()>>>
	
		[]
		
	Link: http://xmlbeans.apache.org/docs/2.0.0/guide/conMethodsForGeneratedJavaTypes.html		


** Resolution of attribute types

	<<Implement TTD note 4.>>

** Resolution of attribute values

	Implemented in <<<XmlBeansModelResolverImpl.resolveAttributeValue(..)>>> 
	using the algorithm:

		* if value is set (using isSetXX(), and sizeOfXXArray for arrays) then
		get the value from the XMLBean:
		
			* returned value = value from XMLBean
			
			* returned value state = SET.
			
			* returned exception = null.
			
			[]
			

		* if attribute has default value then get the default value:
		
			* returned value = default value from XMLBean
			
			* returned value state = DEFAULT.
			
			* returned exception = null.
			
			[]
		
		
		* if attribute value is nil then return null:
		
			* returned value = null.
			
			* returned value state = NIL.
			
			* returned exception = null.
			
			[]
					

		* otherwise an unresolved values is returned:
		
			* returned value = null.
			
			* returned value state = FAILED.
			
			* returned exception = null.
			
			[]
		
		* and finally if an exception occurs during resolution in one of the above then this is returned:
		
			* returned value = null.
			
			* returned value state = FAILED.
			
			* returned exception = ModelResolutionException.
			
			[]
				
		[]
			
*** Resolution of is set state
	
	<<<XmlBeansModelAccessorImpl.isValueSet(..)>>> uses the algorithm:
	
		* if attribute is array, then get the set state using the method <<<sizeOfArray()>>>
		where array size > 0 interpreted as SET, and size == 0 is interpreted as NOT_SET.
		
		* if attribute isn't array, then get the set state using the method <<<isSetXX()>>>,
		where boolean true is interpreted as SET and and false interpreted as is NOT_SET. 
		
		* if no setter could be found, then is the set state interpreted as NOT_SET. 
	
		[]	
			
*** Resolution of is default state			
		
	<<<XmlBeansModelAccessorImpl.isDefaultValueDefined(..)>>> uses the algorithm:
	
		* if the attribute schema property has hasDefault() == SchemaProperty.CONSISTENTLY 
		then get default state is interpreted as DEFAULT_DEFINED.
		
		[]  		
			
*** Regarding resolution of nil state
	
	<<<XmlBeansModelAccessorImpl.isNil(..)>>> uses the algorithm:
	
		* if the attribute schema property has hasNillable() != SchemaProperty.CONSISTENTLY 
		then the nil state is interpreted as NOT_NIL.
	
		* if attribute is array, then get the set state using the method <<<sizeOfArray()>>>
		where array size > 0 interpreted as NOT_NIL, and size == 0 is interpreted as NIL.
		
		* if attribute isn't array, then get the set state using the method <<<isNilXX()>>>,
		where boolean true is interpreted as NIL and and false interpreted as is NOT_NIL. 
	
	
		[]															
		
** Resolution of collection attribute values

	TODO: write		

					
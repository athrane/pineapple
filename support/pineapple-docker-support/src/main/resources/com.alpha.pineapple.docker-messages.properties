
# DockerClientImpl messages
dci.create_container_info=Create container [{0}] from image: {1} 
dci.delete_container_info=Delete container [{0}] from image: {1} 
dci.start_container_info=Start container: {0} 
dci.stop_container_info=Stop container: {0} 
dci.kill_container_info=Kill container: {0} 
dci.kill_container_notfound_failure=Failed to find container: {0}. Will skip killing the container.
dci.pause_container_info=Pause container: {0} 
dci.pause_container_notfound_failure=Failed to find container: {0}. Will skip pausing the container.
dci.unpause_container_info=Unpause container: {0} 
dci.unpause_container_notfound_failure=Failed to find container: {0}. Will skip unpausing the container.
dci.list_images_info=List images
dci.report_images_info=Images report
dci.report_containers_info=Containers report
dci.list_containers_info=List containers
dci.inspect_container_info=Inspect container: {0} 
dci.inspect_container_notfound_failure=Failed to find container: {0}. Will skip inspecting the container.
dci.create_image_info=Create image: {0}
dci.delete_image_info=Delete image: {0}
dci.tag_image_info=Tag image [{0}] in repository from [{1}]
dci.create_tar_archive_info=Create TAR archive from source directory: {0}
dci.build_image_info=Build image from Dockerfile: {0}
dci.inspect_image_info=Inspect image: {0}
dci.inspect_image_notfound_failure=Failed to find image: {0}. Will skip inspecting the image.
dci.test_container_info=Test container: {0}

# DockerSessionImpl messages
ds.connect_start=Starting to connect to resource [{0}] using credential with id [{1}].
ds.connect_start2=Starting to connect with user [{0}] to host [{1}:{2}].
ds.connect_failure=Failed to connect to resource [{0}] with error: {1}
ds.connect_completed=Successfully connected to resource: {0}. 
ds.connect_failure2=Failed to connect to host [{0}:{1}] with user [{2}] with error: {3}
ds.connect_completed2=Successfully connected to host [{0}:{1}] with user [{2}]. 
ds.expanded_serviceuri_info=Invoking URL: {0}
ds.parse_json_failure=HTTP Post at URL [{0}] failed to parse returned JSON with error: {1}.

# CreateImageCommand
cic.create_image_completed=Successfully created image: {0}.
cic.create_image_failed=Failed to create image with error: {0}.
cic.list_image_info=Docker returned [{0}] image creation info updates.
cic.list_single_info=Status: {0}
cic.image_already_exists_success=Image already exist: {0}. Will skip image creation. 
cic.image_already_exists_note=Please notice that image isn't updated.

# BuildImageCommand
bic.build_image_completed=Successfully built image from Docker file with tag: {0}.
bic.build_image_failed=Failed to to build image with error code [{0}] and error: {1}.
bic.read_tar_archive_error=Failed to to build image due to failure to read TAR archive.
bic.list_image_info=Docker returned [{0}] image creation info updates.
bic.list_single_info=Status: {0}
bic.list_single_stream_info=Stream: {0}
bic.validate_tar_exist_info=Validated TAR archive exist at: {0}.
bic.validate_tar_exist_failure=Expected TAR archive doesnt exist at: {0}. Failed to to build image.
bic.image_already_exists_success=Image already exist: {0}. Will skip building image. 
bic.image_already_exists_note=Please notice that image isn't updated.

#CreateTarArchiveCommand
ctac.delete_oldtararchive_failed=Failed to delete old archive: {0}.
ctac.create_archive_error=Failed to create TAR archive with error: {0}.
ctac.validate_sourcedirectory_exist_failed=Failed to create TAR archive. Source directory doesnt exist: {0}. 
ctac.validate_sourcedirectory_isdir_failed=Failed to create TAR archive. Source directory isnt a directory: {0}. 
ctac.succeed=Successfully created TAR archive [{0}] from source directory: {1}.

# CreateTaggedImageCommand
ctic.tag_image_completed=Successfully created tagged image [{0}] from source image: {1}.
ctic.image_already_exists_success=Target image already exist: {0}. Will skip image tagging. 
ctic.image_already_exists_note=Please notice that target image isn't updated.
ctic.tag_image_doesnt_exist_failure=Failed to tag image into repository since the source image [{0}] doesn't exist.

# DeleteImageCommand
dic.delete_image_completed=Successfully deleted image: {0}.
dic.delete_image_notfound_success=Failed to find image: {0}. Will skip deleting the image.

# ListAllImagesCommand
laic.list_image_completed=Successfully listed [{0}] images.

# InspectImageCommand
imc.inspect_image_completed=Successfully inspected image: {0}.

# ReportOnImagesCommand
roic.list_image_info=Docker returned [{0}] images(s). Only named images will be added to report.
roic.list_single_image_header_info= {0} ({1} : {2})
roic.list_images_completed=Successfully created report for images.
roic.inpect_image_failure=Failed to inspect image due to unexpected error (see stack trace).

# CreateContainerCommand
ccc.create_container_completed=Successfully created container: {0}.
ccc.create_container_info=Created container [{0}] from image: {1}. 
ccc.rename_container_info=Renamed container to: {0}.
ccc.imageinfo_notdefined_failure=Failed to create container due to undefined image info.
ccc.container_already_exists_success=Container already exist: {0}. Will skip container creation. 
ccc.container_already_exists_note=Please notice that existing container isn't updated to match model configuration.

# ListAllContainersCommand
lacc.list_containers_completed=Successfully listed [{0}] containers.

# StartContainerCommand
scc.start_container_completed=Successfully started container: {0}.
scc.message_info=Docker returned unexpected message: {0}
scc.start_container_notfound_failure=Failed to find container: {0}. Will skip starting the container.
scc.start_container_unpause=Container is paused. Will unpause container prior to starting it.

# PauseContainerCommand
pcc.pause_container_completed=Successfully paused container: {0}.
pcc.message_info=Docker returned unexpected message: {0}.
pcc.pause_container_notfound_failure=Failed to find container: {0}. Will skip pausing the container.
pcc.pause_container_already_paused=Container was already paused. Will skip pausing the container.
pcc.pause_container_start=Container is stopped. Will start container prior to pausing it.

# UnpauseContainerCommand
upcc.unpause_container_completed=Successfully unpaused container: {0}.
upcc.message_info=Docker returned unexpected message: {0}.

# KillContainerCommand
kcc.list_containers_completed=Successfully killed container: {0}.

# StopContainerCommand
stcc.stop_container_completed=Successfully stopped container: {0}.
stcc.stop_container_notfound_failure=Failed to find container: {0}. Will skip stopping the container.
stcc.stop_container_unpause=Container is paused. Will unpause container prior to stopping it.

# DeleteContainerCommand
dcc.delete_container_completed=Successfully deleted container: {0}.
dcc.delete_container_notfound_success=Failed to find container: {0}. Will skip deleting the container.

# InspectContainerCommand
icc.inspect_container_completed=Successfully inspected container: {0}.

# ReportOnContainersCommand
rocc.list_container_info=Docker returned [{0}] containers.
rocc.list_single_container_header_info={0} ({1})
rocc.list_containers_completed=Completed report for containers.
rocc.list_container_ports_header=Port(s)
rocc.list_container_ports_info=Container returned [{0}] set(s) of ports.
rocc.list_single_container_port_info={0}:{1}->{2}/{3}
rocc.list_single_container_completed=Completed report for container.
rocc.inpect_container_failure=Failed to inspect container due to unexpected error (see stack trace).

# TestContainerCommand
tcc.test_container_notfound_failure=Failed to find container: {0}. Will skip testing the container.
tcc.test_container_completed==Successfully tested container.
tcc.test_container_assert_state_failure=Failed to assert expected container state: {0}. The actual state was: {1}.
tcc.test_container_assert_state_success=Successfully asserted container state: {0}.
tcc.test_container_assertstate_failure=Container test failed, due to unexpected state.
tcc.test_container_assert_state_info= Assert container state is: {0}

# DockerHelper
dh.create_default_session_failure=Failed to create default Docker session with error: {0}
dh.create_image_failure=Image creation failed with error: {0}
dh.tag_image_failure=Failed to tag image with error: {0}
dh.delete_image_failure=Failed to delete image with error: {0}
dh.create_container_failure=Failed to create container with error: {0}
dh.start_container_failure=Failed to start container with error: {0}
dh.kill_container_failure=Failed to kill container with error: {0}
dh.stop_container_failure=Failed to stop container with error: {0}
dh.delete_container_failure=Failed to delete container with error: {0}
dh.unsuccessful_result_failure=Execution [{0}] failed with unsuccessful result.
dh.image_doesnt_exist_failure=Validation of image existence failed since image [{0}] doesn't exist in repository.
dh.create_dockerfile_failure=Failed to create Docker file with error: {0}
dh.create_tar_archive_failure=Failed to create TAR archive with error: {0}
dh.container_doesnt_exist_failure=Validation of container existence failed with error: {0}.
dh.pause_container_failure=Failed to pause container with error: {0}

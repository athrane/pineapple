 ------
 Development documentation
 ------
 Allan Thrane Andersen 
 ------
 August 2010
 ------

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Development documentation

	This document provides an overview of the various documents and links 
	that are part of this project's technical documentation.

* Implementation
	
	All of the implementation of the project resides in the Maven POM.
		
	The project builds a ZIP file named <<<pineapple-standalone-web-client-$\{pineapple.release.version\}.zip.>>> 
	where <<<$\{pineapple.release.version\}>>> is the current Pineapple version.
	
	The ZIP file creation is implemented in the	Maven assembly file <<<src\main\assembly\release.xml.>>>
	
	The content of the project is located in the directory <<<src\main\release-dir>>> which contains the application directory. 
		
	The ZIP file contains the structure:
	
+---+
pineapple-standalone-web-client-${pineapple.release.version}
     |     
     +--- runPineapple.cmd
     +--- runPineapple.sh     
     |     
     +--- conf     
     |     +--- log4j.properties
     |     `--- jetty.xml
     |               
     +--- resources
     |     `--- jetty-logging.properties
     |               
     +--- webapps
     |     `--- pineapple-web-application-war.war
     |               
     +--- lib
           +--- pineapple-jetty-starter-1.0.jar
           +--- jetty-*.jar
           +--- log4j-1.2.14.jar
           +--- slf4j-api-1.7.7.jar           
           +--- slf4j-log4j12-1.7.7.jar           
           `--- servlet-api-3.1.0.jar
+---+	 	 
	
	The <<<runPineapple.cmd>>> or <<<runPineapple.sh>>> invokes Java with the Jetty starter JAR file 
	<<<pineapple-jetty-starter-1.0.jar>>> which starts Jetty as a stand-alone application.
	
	When Jetty starts, it will deploy the Pineapple <<<pineapple-web-application-war.war>>>
	and thus make it available as a stand-alone application.
	
	The <<<conf>>> directory contains internal configuration files.
	
	The <<<webapps>>> directory contains the Pineapple web application (war) which are deployed into Jetty.
	
	The <<<lib>>> directory contains all the jar files that constitutes the Jetty web server, which are:

		* The Jetty jars required for web application deployment
		
		* <<<servlet-api-3.1.0.jar>>> which is required by Jetty 9.2.x
		
		[]
		
* Internal configuration

	The stand-alone web application uses two configuration files. The source files are 
	located in the directory <<<src\main\release-dir\conf>>>. As a result of the
	build process the configuration files are copied into the ZIP file in the 
	location <<<pineapple-standalone-web-client-$\{version\}\conf>>> as shown above.
	
	The files are: 
	
	* <<<log4j.properties>>> - configures logging.
	
	* <<<jetty.xml>>> - configures the Jetty web server.

	[]
	
**	Logging 
	
	Jetty is configured to use Slf4j and Log4j for logging. 
	
	Slf4j is enabled in the file
	<<<pineapple-standalone-web-client-$\{pineapple.release.version}/resources/jetty-logging.properties>>> 
	file which configures Jetty logging layer by setting the value of the <<<org.eclipse.jetty.util.log.class>>>: 

+---
# Configure Jetty for SLf4j Logging
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog
+---

	Log4j is "enabled" through the inclusion of the Slf4j binding layer for Log4j in the application
	class path, e.g. the jars <<<slf4j-api-VERSION.jar>>> and <<<slf4j-log4j12-VERSION.jar>>>           
	
	The log output is controlled by the Log4j configuration file
	<<<pineapple-standalone-web-client-$\{pineapple.release.version}/conf/log4j.properties>>>.	
	The <<<log4j.properties>>> file. configures logging for ALL the Pineapple 
	components / jars which constitutes the web application. Log4j is configured to
	log to <<<$\{pineapple.home.dir}/logs/pineapple-web-application.log>>>. 		
		
**	Jetty server web configuration

	The Jetty web server is configured by the <<<jetty.xml>>> file  which defines:
	
	* The thread pool
	
	* The connectors and handlers
		
	[]
	
** Enabling JSP support in Jetty

	TODO: this still doesn't work ...
	
	org.mortbay.jetty:jsp-2.1-glassfish:jar:2.1.v20100127:runtime
	org.eclipse.jetty:jetty-jsp-2.1:jar:7.1.6.v20100715:runtime
	
	
* Handling JDK incompatibility when running Pineapple from JDK1.6 towards WebLogic on JDK1.5 

	Running Pineapple on a JDK1.6 which connects to JMX running on WebLogic 9.2 
	server with JDK1.5 results in a thrown exception on the client side. The most 
	relevant exception seems to be:

	<<<Caused by: java.rmi.UnmarshalException: failed to unmarshal class 
	weblogic.security.acl.internal.AuthenticatedUser; nested exception is: 
	java.io.StreamCorruptedException: invalid type code: 31>>>

	There was a behavior change in <<<ClassLoader.loadClass()>>> handling byte array. 
	As discussed in http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434149. Adding 
	this VM argument to client JVM preserves the backward compatible behavior 
	of the <<<loadClass()>>> method. 		

	This issue is currently addressed by adding the VM argument  
	<<<-Dsun.lang.ClassLoader.allowArraySyntax=true>>> when the client 
	is invoked in <<<runPineapple.cmd/.sh>>>.
		
* Application version

	The master POM for the Pineapple project contains a property definition named <<<pineapple.release.version>>> 
	which contains the current visual release number:
		
+---+
	<properties>
		<pineapple.release.version>x.y.z</pineapple.release.version>
	</properties>

+---+	 

	The version number is added to name of the created ZIP file during usage of the assemply file.

	For more information about Pineapple version information please consult the
	{{{../../../../development/version-info.html}version info page}}.



	
 ------
 com.alpha.pineapple.command package description
 ------
 Allan Thrane Andersen 
 ------
 January 2008
 ------

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

com.alpha.pineapple.command description
	
* Content
	
	* Generic (reusable) Chain commands

		* InitializeOperationCommand
		
		* LoadConfigurationCommand

		* SetMBeanAttributeCommand

		* CreateModelCommand

		* CreateFromModelCommand
		
		* ExecuteCreateSemanticsCommand
		
		* ExecuteDeleteSemanticsCommand

		* InitializeSessionManagerCommand

		[]
		
	* Other classes
	
		* CommandNames
		
		* CommandException
		
		[]
		
	[]		
	
* Interfaces and classes

** CommandNames

	Interface which defines the catalog names of the commands in this package.

** CommandException

	Exception which should thrown by commands if execution fails.
	
	For info about how implement commands in Pineapple, read the 
	<<{{{../../../../../target/site/development/implementation-commands.html}Command implementation}}>>
	document.	

** LoadConfigurationCommand

	Chain command, implements <<<Command>>> interface.
	
	Load a configuration file, using Commons Configuration. If file name ends 
	with <<<.xml>>> then the configuration file is loaded as an <<<XMLConfiguration>>>. 
	Otherwise the configuration file is loaded as an <<<PropertiesConfiguration>>>.
	
	<<Precondition:>>	
	
	* <<<LoadConfigurationCommand.FILENAME_KEY>>> is defined in context, defines the 
	configuration file to load
	
	[]

	<<Postcondition:>>
	
	* <<<LoadConfigurationCommand.CONFIGURATION_KEY>>> is defined in context, 
	Contains either <<<PropertiesConfiguration>>> or <<<XMLConfiguration>>>.
	
	[]
	
** InitializeOperationCommand

	Chain command, implements <<<Command>>> interface.

	Does initialization prior to execution of a management operation. Adds key
	to context which defines configuration file to load.
	
	<<Precondition:>>	

	* <<<ManagerContext.DEPLOYMENT_DIR_KEY>>> is defined in context
	defines location of management configurations.
	
	* <<<ManagerContext.APPLICATION_KEY>>> is defined in context
	defines name of management configuration.
	
	* <<<ManagerContext.ENVIRONMENT_KEY>>> is defined in context
	defines current environment to work in.

	[]	
	
	<<Postcondition:>>

	* <<<LoadConfigurationCommand.FILENAME_KEY>>> is defined in context.
	contains the configuration file to load from management configuration.
	
	[]
	
** ProcessConfigurationCommand

	Chain command, implements <<<Command>>> interface.
	
	The command processes a loaded configuration object, i.e. do template substitutions.

	<<Precondition:>>	

	* <<<LoadCombinedConfigurationCommand.CONFIGURATION_KEY>>> is defined in context.
	Contains loaded configuration, i.e configuration file from current management 
	configuration.
	
	* <<<PreprocessConfigurationCommand.TEMPLATES_ROOT_KEY>>> is defined in context.
	Contains XPATH to templates.
	
	* <<<PreprocessConfigurationCommand.TRAVERAL_ROOT_KEY>>> is defined in context.
	Contains XPATH to root where traversal should start.
	
	[]
	
	<<Postcondition:>>	

	* <<<LoadCombinedConfigurationCommand.CONFIGURATION_KEY>>> is defined in context
	Contains modified configuration, which templates definitions applied.

	[]
	
** InitializeSessionManagerCommand	
	
	Chain command, implements <<<Command>>> interface.

	Initialize SessionManager, which handles access to external resources. 
	Initializes SessionManager with resource implementation info and 
	credential provider.
	
	<<Precondition:>>	
	
	* <<<ManagerContext.CREDENTIAL_PROVIDER_KEY>>> is defined in context. Contains 
	the credential provider instance.

	* <<<InitializeSessionManagerCommand.RESOURCES_KEY>>> is defined in context
	contains resources configuration	

	[]
	
	<<Postcondition:>>
	
	* <<<ManagerContext.SESSIONMANAGER_KEY>>> is defined in context.
	contains the SessionManager instance
	
	[]

** LoadCombinedConfigurationCommand

	Chain command, implements <<<Command>>> interface.
	
	Load multiple configuration files, using Commons Configuration. The 
	loaded configurations are combined into a returned <<<CombinedConfiguration>>>. 

	Each configuration are identified using a name.
	
	<<Precondition:>>

	* <<<LoadCombinedConfigurationCommand.FILENAMES_KEY>>> is defined in context
	defines a mapping between configuration name and the file which should be loaded.

	[]
	
	<<Postcondition:>>

	* <<<LoadCombinedConfigurationCommand.CONFIGURATION_KEY>>> is defined in context, 
	Contains a <<<CombinedConfiguration>>> where each loaded configuration is 
	identified by name.

	[]
	
** ExecuteCreateSemanticsCommand

	Chain command, implements <<<Command>>> interface.
	
	Executes create semantics on the entities of a configuration model.
	
	<<Precondition:>>	
	
	TODO: ...

	[]
	
	<<Postcondition:>>	

	TODO: ...
	
	[]

** ExecuteTestSemanticsCommand

	Chain command, implements <<<Command>>> interface.
	
	Executes test semantics on the entities of a configuration model.
	
	<<Precondition:>>	
	
	* <<<LoadCombinedConfigurationCommand.FILENAMES_KEY>>> is defined in context
	defines a mapping between configuration name and the file which should be loaded.

	[]
	
	<<Postcondition:>>	

	* No changes in the context.
	
	* Executed test semantics.
	
	[]
	
	

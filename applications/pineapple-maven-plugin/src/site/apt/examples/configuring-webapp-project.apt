 ------
 Configuring a web application project for usage with the plugin
 ------
 Allan Thrane Andersen
 ------
 January 2008

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Configuring a web project for usage with plugin

	This example illustrates how to create a simple web application project
	and configuring the project to use the plugin for deployment to a local
	WebLogic domain.   

	Setting up a web project to use with the plugin takes N steps:
	
	* Create a simple web application project. 
	
	* Argument the project with management data. 
	
	* Adding an assembly descriptor to the project.
	
	* Build the project.
	
	* Configure the plugin to use a local WebLogic domain.
	
	* deploy the application
	
	[]

* Create a simple web application project

	Create a web application project using the archetype plugin:
	
+--------
mvn archetype:create 
  -DgroupId=org.alpha.webapp
  -DartifactId=webapp
  -DarchetypeArtifactId=maven-archetype-webapp
+---------
	
	Which creates a Maven project with this layout: 
 
+-------- 
webapp
 |-- src
 |   `-- main
 |       `-- java
 |           |-- resources
 |           |-- webapp
 |           |   `-- WEB-INF
 |           |       `-- web.xml
 |           `-- index.jsp
  `-- pom.xml
+--------  
  
  
* Argument the project with management data

	The plugin uses a directory containing <<management data>> which
	configures how the plugins executes it management operations. 
	
	The management data is stored in a <<<management>>> directory and
	its sub directories. Detailed information about the content of the 
	different directories and files can be found here (TODO: add link 
	to detailed explanation). 	

	Create these directories and file: 
		
		* <<<src/main/management>>>
		 
			* The directory is the root directory for the management data.
			
			[] 

		* <<<src/main/management/app>>> 
		
			* The directory is a placeholder directory which at	runtime
			time for operations will contain the project artifact if the 
			projects creates a deployable artifact.
			
			[]  

		* add an empty file named <<<dummy.txt>>> to the <<<app>>> directory 
		for the sake of CVS. 

		* <<<src/main/management/plan>>> 
		
			* Contains deployment plans if the project artifact is deployed 
			using deployment plans.  
			
			[]

		* <<<src/main/management/properties>>> 
		
			* This is the most important directory in the management data. 
			
			* The directory contains a property file for each 
			environment in which the project artifact is used.
			
			[]

		[]
		
	The resulting project layout is :

+-------- 
webapp
 |-- src
 |   `-- main
 |       |-- management
 |       |   |-- app
 |       |   |   `-- dummy.txt
 |       |   |-- plan
 |       |   `-- properties
 |       `-- java
 |           |-- resources
 |           |-- webapp
 |           |   `-- WEB-INF
 |           |       `-- web.xml
 |           `-- index.jsp
  `-- pom.xml
+--------  

* Add assembly descriptor

	An assembly is configured to create an project binary which contains the <<<management>>>
	directory and its content.  

	Create the directory <<<src/main/assembly>>>.

	Add an assembly descriptor named <<<management.xml>>> to the <<<assembly>>> directory.

	The resulting project layout is :

+-------- 
webapp
 |-- src
 |   `-- main
 |       |-- assembly
 |       |   `-- management.xml 
 |       |-- management
 |       |   |-- app
 |       |   |   `-- dummy.txt
 |       |   |-- plan
 |       |   `-- properties
 |       `-- java
 |           |-- resources
 |           |-- webapp
 |           |   `-- WEB-INF
 |           |       `-- web.xml
 |           `-- index.jsp
  `-- pom.xml
+--------  
	
	Put this content into the assembly descriptor:
	 
+--------  	 
<?xml version="1.0"?>
<assembly>
  <id>deployment</id>
  <formats>
    <format>zip</format>
    <format>dir</format>    
  </formats>
  <fileSets>
    <fileSet>
      <directory>src/main/management</directory>
      <outputDirectory></outputDirectory>
      <excludes>
        <exclude>**/dummy.txt</exclude>
      </excludes>
    </fileSet>
  </fileSets>
  <files>
    <file>
      <source>${basedir}/target/${artifactId}-${version}.war</source>
      <outputDirectory>app</outputDirectory>
      <destName>${artifactId}-${version}.war</destName>
    </file>
  </files>  
</assembly>
+--------  

	Configure the project to use the assembly plugin (with the assembly descriptor) as 
	part of the build process by adding this to the POM in the <<<build/plugins>>> 
	section:
	
+--------  	
  <build>
    <plugins>
      ...
      ...
      ...
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.1</version>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/management.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>attached</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ...
      ...
    </plugins>
  </build>
+--------  		
	
	<<Note:>> The assembly plugin is attached to the Maven <package> phase. If
	 the project is built using a <<<package>>> goal then the assembly plugin
	 is invoked as part of the build process.

* Build the project
	
	Build the project by executing the following command:

+--------
mvn clean package
+---------
	
	The <<<target>>> directory will contain:
	
+-------- 
webapp
 |-- src
 |-- target
 |   |-- webapp-1.0-SNAPSHOT
 |   |-- webapp-1.0-SNAPSHOT-management.dir
 |   |-- webapp-1.0-SNAPSHOT-management.zip 
 |   `-- webapp-1.0-SNAPSHOT.war 
+--------  
	
	The <<<webapp-1.0-SNAPSHOT>>> contains an exploded build of the application.
	
	The <<<webapp-1.0-SNAPSHOT.war>>> contains the "zipped" build of the 
	application.	
	
	The <<<webapp-1.0-SNAPSHOT-management.dir>>> contains an exploded build 
	of the application including the management data which needed by Pineapple. 
	The exploded build is used by the plugin. 

	The <<<webapp-1.0-SNAPSHOT-management.zip>>> contains an zipped build 
	of the application including the management data which needed by Pineapple.
	
* Configure the plugin to use a local WebLogic domain 
	  
	To configure the plugin to work three steps are needed:
	
	* Define the new <<environment>> for the plugin.
	 
	* Define <<resources>> in the environment.
	
	* Define security <<credentials>> to access protected resources in the environment.
	
	[]
		
** Define a new environment

	The local WebLogic domain is considered an environment to the plugin, 
	so an environment needs to be defined. 
	
	The environments are defined in the file 
	<<<$\{user.home}/.pineapple/conf/resources.xml>>>.
	
	Add a new <<<environment>>> definition with the identifier <<<localdomain>>> to the 
	<<<environments>>> section in <<<resources.xml>>> file:  
	
+--------  	
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <environments>
    <environment>
      <identifier>localdomain</identifier>
      <resources/>
    </environment>
  </environments>
</configuration>
+--------  		

** Define resource in the environment

	The WebLogic administration server is considered an resource to the plugin, 
	so a resource needs to be defined in the environment.
	
	Add a new <<<jmx-resource>>> to the <<<localdomain>>> environment in 
	<<<resources.xml>>> file: 
	
+--------
  ... 	
  <environment>
    <identifier>localdomain</identifier>
    <resources>
      <jmx-resource>
        <identifier>weblogic-jmx-edit</identifier>
        <credential-identifier>weblogic-jmx-edit-credential</credential-identifier>
        <factory>com.alpha.pineapple.resource.weblogic.jmx.JMXEditFactory</factory>
        <host>127.0.0.1</host>
        <port>7001</port>
        <url-path>weblogic.management.mbeanservers.edit</url-path>
      </jmx-resource>
    </resources>
  </environment>
  ...
+--------  		

	The resource is defined by these attributes:
	
	* <<<identifier>>> defines an identifier for the resource which is 
	use to reference the resource from management data in projects.
	
	* <<<credential-identifier>>> defines which security credential is used for 
	authentication during access to the resource.
		
	* <<<factory>>> defines the Pineapple plugin is used to access this resource.
	
	* <<<host>>> defines the URL to the resource.
	
	* <<<port>>> defines the port number for the resource.	
	
	* <<<url-path>>> defines the URL-path to the resource.
		 	
	[]
	 

** Define security credential for the resource	

	The WebLogic administration server is a protected resource which is protected
	by a user-id/password. A <<credential>> defines authentication information 
	used to access a protected resource.   

	The credentials are defined in the file 
	<<<$\{user.home}/.pineapple/conf/credentials.xml>>>.
		
	Credentials are grouped by environment the same way as resources are. The 
	first step is define an environment in the <<<credentials.xml>>> file.    
		 		
	Add a new <<<environment>>> definition with the identifier <<<localdomain>>> to the 
	<<<environments>>> section in <<<credentials.xml>>> file:  
	
+--------  	
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <environments>
    <environment>
      <identifier>localdomain</identifier>
      <credentials>
    </environment>
  </environments>
</configuration>
+--------  		

	Add a new <<<credential>>> to the <<<localdomain>>> environment in 
	<<<credentials.xml>>> file: 
	
+--------
    ...
    <environment>
      <identifier>localdomain</identifier>
        <credentials>
          <credential>
            <identifier>weblogic-jmx-edit-credential</identifier>
            <user>weblogic</user>
            <password>weblogic</password>
          </credential>
        </credentials>
    </environment>
    ...
+--------  		

	<<Notice:>> The identifier <<<weblogic-jmx-edit-credential>>> is 
	referenced from the resource definition in the <<<resources.xml>>> file.


* Using Pineapple to deploy the application

	TODO: document how to configure deployment-plugin

	Deploy the application by executing the following command:

+--------
mvn com.alpha.pineapple:pineapple-maven-plugin:1.0-SNAPSHOT:install-app -Denvironment=localdomain
+---------
	
	
	
	
	
 ------
 How-to: Configure Linux kernel swapiness 
 ------
 Allan Thrane Andersen
 ------
 March 2013

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

How-to: Configure Linux kernel swapiness 

* Overview

	This example illustrates how the SSH plugin can be used to configure
	the kernel swap policy in Linux (specifically the Linux variants Centos and Red Hat). 
 	
	Three steps are required to use the plugin:
	
	* Define resources for enabling usage of the plugin
	
	* Define credentials for authentication.	
		 	
	* Define module.
	
	[]
	
	..And finally Pineapple should be invoked to execute the module to configure the targeted resources.
	
	For information about how to define resource, credentials and modules, 
	refer to the {{{../usage/index.html} plugin usage page.}}				

** Part of the default configuration

	This example is included in the 
	{{{../../../usage/default-configuration.html}default configuration}}	
	created by Pineapple, so there is no need to create it by hand.

* Define resources

	A resource defines a entity in a IT environment which is manageable by Pineapple
	through some protocol. In this example entity is a Linux OS and the used protocol 
	is SSH. One resource is defined for each Linux host where the swappiness value should be 
	configured.
	
	In this example we will use the <<<linux-vagrant>>> environment defined as part of the 
	default configuration. The environment defines a network with three hosts: 

	* <Node1> with IP Address: 192.168.34.10

	* <Node2> with IP Address: 192.168.34.11
	
	* <Node3> with IP Address: 192.168.34.12
	
	[] 

	To enable SSH usage for these hosts, three resources are defined within the <<<linux-vagrant>>> environment
	in the resources file located at <<<$\{user.home}/.pineapple/conf/resources.xml>>>:	
	
+---	
<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns="http://pineapple.dev.java.net/ns/environment_1_0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pineapple.dev.java.net/ns/environment_1_0
    http://pineapple.dev.java.net/ns/environment_1_0.xsd">
     
    <environments>
        <environment description="Vagrant multi-machine Linux environment" id="linux-vagrant">
            <resources>
                <resource plugin-id="com.alpha.pineapple.plugin.ssh" credential-id-ref="ssh-node1" id="ssh-node1" >
                    <property value="192.168.34.10" key="host"/>
                    <property value="22" key="port"/>
                    <property value="1000" key="timeout"/>
                </resource>
                <resource plugin-id="com.alpha.pineapple.plugin.ssh" credential-id-ref="ssh-node2" id="ssh-node2" >
                    <property value="192.168.34.11" key="host"/>
                    <property value="22" key="port"/>
                    <property value="1000" key="timeout"/>
                </resource>
                <resource plugin-id="com.alpha.pineapple.plugin.ssh" credential-id-ref="ssh-node3" id="ssh-node3" >
                    <property value="192.168.34.12" key="host"/>
                    <property value="22" key="port"/>
                    <property value="1000" key="timeout"/>
                </resource>
            </resources>
        </environment>
    </environments>
</configuration> 
+---

	Each resource is defined with a different ID and IP address. All other properties are identical. The role of the 
	attribute <<<plugin-id>>> is to bind the resource definition to the plugin code at runtime which implements
	the SSH plugin.

* Define credentials

	Since SSH requires authentication, each resource defines a reference to a credential. A credential defines the 
	user name and password used for authentication when a SSH session is created to a host.
	
	Three credentials are created within the <<<linux-vagrant>>> environment to support authentication. The credentials
	are defined in the credentials file located at <<<$\{user.home\}/.pineapple/conf/credentials.xml>>>: 
	
+---
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://pineapple.dev.java.net/ns/environment_1_0">
    <environments>
        <environment description="Vagrant multi-machine Linux environment" id="linux-vagrant">
            <credentials>
                <credential password="vagrant" user="vagrant" id="ssh-node1"/>
                <credential password="vagrant" user="vagrant" id="ssh-node2"/>
                <credential password="vagrant" user="vagrant" id="ssh-node3"/>
            </credentials>
        </environment>
    </environments>     
</configuration>
+---	

* Define module	  

	A module defines input to Pineapple and consists in its minimal form of a single XML file containing a model:
	
[../images/module-directory-layout.jpg]		 

	Create the directory: <<<$\{user.home\}/.pineapple/modules/ssh-001-configure-wm-swapiness/models>>> to create 
	a module and <<<models>>> directory in the Pineapple Modules Directory. The module 
	for this example will end up with the structure:

+---
ssh-001-configure-wm-swapiness
 |
 +--- models	 
       +--- linux-vagrant.xml 
+---
	
	Then, in the models directory, create a model file named <<<linux-vagrant>>>, with the content:

+---
<?xml version="1.0" encoding="UTF-8"?>
<mmd:models xmlns:mmd="http://pineapple.dev.java.net/ns/module_model_1_0" 
   xmlns:shp="http://pineapple.dev.java.net/ns/plugin/ssh_1_0">
   <mmd:model target-resource="regex:ssh-node.*">
      <mmd:content>
         <shp:ssh>
            <!-- set kernel swappiness -->
            <shp:execute command="sudo sysctl -w vm.swappiness=0" />
         </shp:ssh>
      </mmd:content>
   </mmd:model>
</mmd:models>
+---	

** The configuration details

	Two schema are used in the model file. The <<<http://pineapple.dev.java.net/ns/module_model_1_0>>> is used
	to define the namespace <<<mmd>>> which defines the general infrastructure for models. The 
	<<<http://pineapple.dev.java.net/ns/plugin/ssh_1_0>>> schema is used to define the namespace 
	<<<shp>>> which is used to define the model for the SSH plugin. Since multiple schemas are used 
	to define the model file, the elements are qualified.
	 
	The <<<target-resource>>> attribute defines a reference to the resource which is targeted when the 
	model executed. In this case, the value <<<regex:ssh-node.*>>> defines a regular expression for targeting 
	multiple resources, e.g. all the resources starting with <<<ssh-node>>>. 

	Finally, the execute command in the model is executed using sudo. The requirement for sudo depends on 
	the privileges of the user used by the SSH plugin to connect to a given host. The users was defined in 
	credentials file in the previous section.
		  		 
* Invoke Pineapple to execute model 

	Start your Pineapple client of choice:
	
	* Select the modules named <<ssh-001-configure-wm-swapiness>>
	
	* Select the <<linux-vagrant>> model.
	
	* Invoke the <<deploy-configuration>> operation to execute configure the kernel swapiness at
	the three nodes defines in the <<<linux-vagrant>>> environment.
	
	[]



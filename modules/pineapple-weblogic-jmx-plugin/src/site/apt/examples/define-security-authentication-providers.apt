 ------
 How-to: Define the security authentication providers for WebLogic 
 ------
 Allan Thrane Andersen
 ------
 June 2010

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

How-to: Define the security authentication providers for WebLogic  

* Overview

	This example illustrates how the authentication providers in the
	security configuration should be defined in an Pineapple module 
	for usage with the WebLogic JMX plugin.  
	
	
* Defining authentication providers

** Creation of "unnamed" authentication providers  

	A default realm created by WebLogic either by invoking the <<<weblogic.Server>>> class to create a domain:
	
+---
Java 
-Dweblogic.RootDirectory=c:\domains\alphadomain 
-Dweblogic.management.username=weblogic 
-Dweblogic.management.password=Weblogic99
-Dweblogic.Name=admserver 
-Dweblogic.Domain=alphadomain 
-Dweblogic.management.GenerateDefaultConfig=true
-Dweblogic.ListenAddress=127.0.0.1 
-Dweblogic.ListenPort=7001
weblogic.Server
+---		

	..or using a template will create a default security realm named <<myrealm>>. The generated <<<config.xml>>> will be defined as:
	
+---
<?xml version="1.0" encoding="UTF-8"?>
<domain xsi:schemaLocation="http://xmlns.oracle.com/weblogic/security/wls http://xmlns.oracle.com/weblogic/security/wls/1.0/wls.xsd http://xmlns.oracle.com/weblogic/domain http://xmlns.oracle.com/weblogic/1.0/domain.xsd http://xmlns.oracle.com/weblogic/security http://xmlns.oracle.com/weblogic/1.0/security.xsd http://xmlns.oracle.com/weblogic/security/xacml http://xmlns.oracle.com/weblogic/security/xacml/1.0/xacml.xsd" xmlns="http://xmlns.oracle.com/weblogic/domain" xmlns:sec="http://xmlns.oracle.com/weblogic/security" xmlns:wls="http://xmlns.oracle.com/weblogic/security/wls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <name>alphadomain</name>
  <domain-version>12.1.1.0</domain-version>
  <security-configuration xmlns:xacml="http://xmlns.oracle.com/weblogic/security/xacml" xmlns:pas="http://xmlns.oracle.com/weblogic/security/providers/passwordvalidator">
    <name>alphadomain</name>
    <realm>
      <sec:authentication-provider xsi:type="wls:default-authenticatorType"/>
      <sec:authentication-provider xsi:type="wls:default-identity-asserterType">
        <sec:active-type>AuthenticatedUser</sec:active-type>
      </sec:authentication-provider>
      <sec:role-mapper xsi:type="xacml:xacml-role-mapperType"/>
      <sec:authorizer xsi:type="xacml:xacml-authorizerType"/>
      <sec:adjudicator xsi:type="wls:default-adjudicatorType"/>
      <sec:credential-mapper xsi:type="wls:default-credential-mapperType"/>
      <sec:cert-path-provider xsi:type="wls:web-logic-cert-path-providerType"/>
      <sec:cert-path-builder>WebLogicCertPathProvider</sec:cert-path-builder>
      <sec:name>myrealm</sec:name>
      <sec:password-validator xsi:type="pas:system-password-validatorType">
        <sec:name>SystemPasswordValidator</sec:name>
        <pas:min-password-length>8</pas:min-password-length>
        <pas:min-numeric-or-special-characters>1</pas:min-numeric-or-special-characters>
      </sec:password-validator>
    </realm>
    <default-realm>myrealm</default-realm>
    <credential-encrypted>{AES}yhdASTIUtuughSyaSlkHpic0e6qpIHab/kgpGpXCGc/s7Nc3Uu/Wm3q9V2HXEfeRZf+bs7DDzoIOaRaXyf2CI91s7WEbpLkqx/5yJycbj/qYQE5ESYpAo+BF1nYXGANN</credential-encrypted>
    <node-manager-username>weblogic</node-manager-username>
    <node-manager-password-encrypted>{AES}LmMHG9HWr3krp41vlCvgSYtbXqZmY6HW4qyFdmxqbfw=</node-manager-password-encrypted>
  </security-configuration>
  	....	
</domain>	
+---

	The import part of the configuration is:

+---
      <sec:authentication-provider xsi:type="wls:default-authenticatorType"></sec:authentication-provider>
      <sec:authentication-provider xsi:type="wls:default-identity-asserterType">
        <sec:active-type>AuthenticatedUser</sec:active-type>
      </sec:authentication-provider>      
+---
	
	..which defines two authentication providers of the types:
	
	* <<<default-authenticatorType>>>
	 
	* and <<<default-identity-asserterType>>>
	
	[] 

	At runtime a WebLogic server will initialize two authentication providers from the above configuration:
	
		* a default identity asserter named <<<DefaultIdentityAsserter>>>
				
		* a default authenticator named <<<DefaultAuthenticator>>>
		
	[]		   		
	
** Making Pineapple cope with "unnamed" authentication providers	
	
	The shown configuration poses a problem for Pineapple which can't resolve unnamed 
	authentication providers against the actual runtime authentication providers which 
	exist in WebLogic.
	
	The solution is to name the authentication providers by adding a <<<name>>> element to their definition:
   
+---
  <sec:authentication-provider xsi:type="wls:default-authenticatorType">
    <sec:name>DefaultAuthenticator</sec:name>
  </sec:authentication-provider>
  <sec:authentication-provider xsi:type="wls:default-identity-asserterType">
    <sec:name>DefaultIdentityAsserter</sec:name>
	<sec:active-type>AuthenticatedUser</sec:active-type>
  </sec:authentication-provider>
+---
     
** Why Pineapple can't handle "unnamed" authentication providers    
     
     The plugin is unable to resolve the unnamed providers because its current implementation 
     doesn't support mapping of the <<<xsi:type>>> definitions to runtime names, e.g. :
     
     * <<<xsi:type="wls:default-authenticatorType>>> isn't mapped to <<<DefaultAuthenticator>>>
     
     * <<<xsi:type="wls:default-identity-asserterType>>> isn't mapped to <<<DefaultIdentityAsserter>>>
      
     []
          
     The plugin uses the <<<name>>> attribute on the providers to resolve them from the two models
     and if they are unnamed then the plugin must resolve <<<\{null, null\}>>> from the module model against
     <<<\{DefaultIdentityAsserter, DefaultAuthenticator\}>>> from the MBean model which fails.
     
             
     
          
          
 ------
 Building Pineapple
 ------
 Allan Thrane Andersen
 ------
 June 2012

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Building Pineapple

* Requirements

	{{{./version-info.html}Pineapple Java requirements.}}
								
* Build from Subversion repository

** Download and install a Subversion client.

	[[1]] Download and install a Subversion client from <<{{{http://subversion.tigris.org/}tigris.org.}}>>
	
** Check out the Pineapple source code	
	
	[[1]] Use the Subversion client to check out the project from trunk using the command (with your username inserted): 
	<<<svn checkout https://svn.java.net/svn/pineapple~svn pineapple --username username>>>

	[]
	
	The remaining instructions can also be found in the file: <<</pineapple/README.txt>>>

** Download and install Maven 3.x+

	[[1]] Download Maven 3.x+ from http://maven.apache.org and install it.
	
	[[2]] Add <<<$M2_HOME/bin>>> to your <<<$PATH>>>.

	[[3]] Create a <<<MAVEN_OPTS>>> environment variable and set its value to: <<<-Xms512M -Xmx512M>>>
	
	[]

** Add third party jars to local Maven repository 

	Pineapple uses some third party jars that are not hosted on the Maven 
	repositories: You will need to manually install the jars into your 
	local repository yourself.

*** Add WebLogic 12.1.2 jar 

	[[1]]  Use the WebLogic jar builder tool to build a JDK 1.6 client jar from a WebLogic 12.1.2: 
	<<{{{http://docs.oracle.com/cd/E24329_01/web.1211/e24378/jarbuilder.htm}Jarbuilder usage instructions.}}>>	
	
	[[2]] Run the following commands from the directory where the wlfullclient.jar was created to install the 
	jar into your local repository:

+--  
	mvn install:install-file 
	-DgroupId=oracle 
	-DartifactId=weblogic-full-client 
	-Dversion=12.1.2 
	-Dpackaging=jar 
	-Dfile=wlfullclient.jar 
	-DgeneratePom=true
+--  	

	[]

** Configure Maven to access ZK EE artifacts

	The Pineapple project has a ZOL license to use ZK EE. During the build Maven will download ZK EE artifacts.
	The ZK EE repository requires authentication to access the ZK EE artifacts. 
	
*** Configure Maven authentication for ZK EE repository

	Configure the Maven <<<<settings.xml>>> to support authentication by adding a <<<server>>> stanza for the ZK EE repository:
	
+--
 <servers>
        <server>
            <id>ZK EE</id><!-- Same as your repository name -->
            <!-- Your premium user name and password -->
            <username>zk-ee-user</username>
            <password>zk-ee-password</password>
        </server>
    </servers>
+--	
	
	User and password for the <<<server>>> section must be provided by ZKOSS.
	
	{{{http://books.zkoss.org/wiki/ZK_Installation_Guide/Setting_up_IDE/Maven/Resolving_ZK_Framework_Artifacts_via_Maven}Detailed description can be found at the ZK Site}}

***	Add ZK certificate to Maven JDK

	To support SSL communication with the ZK EE repository, the JVM which is used to execute Maven, must have access to the
	ZK certificate. 
	
	This can be done in several different ways, but one way to do is:
	
	* Get CA certificate from ZKOSS.
	
	* Import it into cacerts for JDK used by Maven to build Pineapple.	

	[]
	
	{{{http://books.zkoss.org/wiki/ZK_Installation_Guide/Setting_up_IDE/Maven/Resolving_ZK_Framework_Artifacts_via_Maven#Sample_of_pom.xml_for_licensed_Professional_Package}Detailed description can be found at the ZK Site}}

	Example from the ZK site:

+---
"C:\Program Files\Java\jdk1.7.0_25\bin\keytool.exe" -import -noprompt -trustcacerts -alias ZKOSS_root_CA -file c:\temp-pineapple\ZKOSS_root_CA.crt -keystore "C:\Program Files\Java\jdk1.7.0_25\jre\lib\security\cacerts" -storepass changeit
+---
	
	An alternative way is to:
	
	* Get CA certificate from ZKOSS.
	
	* Extract certificate and create ZK EE key store:
	
+--
keytool.exe -importcert -alias zkee -keystore zkee.jks -storepass secret -file ZKOSS_root_CA.crt	
+--	

	* Invoke Maven with MAVEN_OPT configured with these arguments:
	
+--	
set MAVEN_OPTS=-Djavax.net.ssl.trustStore=/path/to/apache-maven-3.0.4/conf/zkee.jks -Djavax.net.ssl.trustStorePassword=secret
+--	
	
** Build Pineapple

	[[1]] From command-prompt, cd into the pineapple directory and run:
	
+--  
	mvn -cpu clean install
+--  

	[]



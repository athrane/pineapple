/*******************************************************************************
 * Pineapple - a tool to install, configure and test Java web applications 
 * and infrastructure. 
 * 
 * Copyright (C) 2007-2015 Allan Thrane Andersen..
 * 
 * This file is part of Pineapple.
 * 
 * Pineapple is free software: you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 * 
 * Pineapple is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public 
 * license for more details.
 * 
 * You should have received a copy of the GNU General Public License along 
 * with Pineapple. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

package com.alpha.pineapple.command.execution;

import org.apache.commons.chain.Command;
import org.apache.commons.chain.Context;
import org.apache.commons.chain.impl.ContextBase;
import org.apache.commons.lang.Validate;

import com.alpha.pineapple.execution.ExecutionResult;
import com.alpha.pineapple.execution.ExecutionResult.ExecutionState;
import com.alpha.pineapple.execution.ExecutionResultImpl;

/**
 * /** Implementation of the <code>CommandRunner</code> interface.
 */
public class CommandRunnerImpl implements CommandRunner {

    /**
     * Chain context key under which the execution result objects are stored.
     */
    static final String EXECUTION_RESULT_CONTEXT_KEY = "execution-result";

    /**
     * Root execution result.
     * 
     */
    ExecutionResult rootResult;

    /**
     * Result of last execution.
     */
    ExecutionState lastExecutionState = null;

    public ExecutionResult getExecutionResult() {

	if (rootResult == null) {
	    return new ExecutionResultImpl(null, "Root result, generated by command runner.");
	} else {
	    return rootResult;
	}
    }

    @SuppressWarnings("unchecked")
    public ExecutionResult run(Command command, String description, Context context) {
	Validate.notNull(command, "command was undefined.");
	Validate.notNull(description, "description was undefined.");
	Validate.notNull(context, "context was undefined.");

	// create execution result object
	ExecutionResult executionResult = getExecutionResult().addChild(description);

	// run
	return run(command, executionResult, context);
    }

    @SuppressWarnings("unchecked")
    public ExecutionResult run(Command command, ExecutionResult result, Context context) {
	Validate.notNull(command, "command was undefined.");
	Validate.notNull(result, "result was undefined.");
	Validate.notNull(context, "context was undefined.");

	// add execution result to context
	context.put(EXECUTION_RESULT_CONTEXT_KEY, result);

	try {
	    // execute command
	    command.execute(context);

	    // register last execution state
	    lastExecutionState = result.getState();

	} catch (Exception e) {
	    result.completeAsError(e);

	    // register last execution state
	    lastExecutionState = result.getState();
	}

	// return result
	return result;

    }

    public void setExecutionResult(ExecutionResult result) {
	rootResult = result;
    }

    public Context createContext() {
	return new ContextBase();
    }

    public boolean lastExecutionSucceeded() {
	return (lastExecutionState == ExecutionState.SUCCESS);
    }

}
